#!/usr/bin/env bash

StartDir=$(pwd)
declare -a shows
# cd to the directory containing the daily and cumulative lists of shows that were recorded, grouped by "TV year" date range.
cd "/Volumes/ExternalHome/rtruell/freeguide/share/Listings"
printf '%s\n' "Looking for '${1}'"
# readarray -t shows <                                   # read the final output from the following commands into an array, trimming off any trailing newline.
#   <(egrep -i "${1}" */AllListings.html 2> /dev/null    # each subdirectory contains the file "AllListings.html".  egrep does a case-insensitive search for the specified show in each of those files.  "<("
#                                                        # (with the matching closing bracket which is at the end of the cut command) causes the final output from the command list to be treated as a file.
#                                                        # the resulting output is ...
#   | tr -s ' ' \                                        # ... piped into tr.  The "-s ' '" squeezes multiple occurances of a space into a single space.  the resulting output is ...
#   | sed -e 's/\/AllListings.html://' -e 's/<br>//'     # ... piped into sed, which removes the text "/AllListings.html:" from the end of the "TV year" date range, and "<br>" from the end of the line.  the
#                                                        # resulting output is ...
#   | awk -F "&nbsp;&nbsp;&nbsp;" '{print $1,$2,$3,$4}'  # ... piped into awk, which changes the field delimiter and then prints the first 4 fields, each separated by a space.  the resulting output is ...
#   | cut -d ' ' -f 1,3-)                                # ... piped into cut, which sets the field delimiter to a space.  it then prints the first field and then fields 3 to the end of the line.
readarray -t shows < <(egrep -i "${1}" */AllListings.html 2> /dev/null | tr -s ' ' | sed -e 's/\/AllListings.html://' -e 's/<br>//' | awk -F "&nbsp;&nbsp;&nbsp;" '{print $1,$2,$3,$4}' | cut -d ' ' -f 1,3-)
numberofshows=${#shows[@]}  # find out how many instances of the show were found.
cd "${StartDir}"  # cd back to the directory we started in.
if [[ "${numberofshows}" -eq 0 ]]; then printf '%s\n' "Nothing found."; fi
olddate="1970-1971"  # a randomly-chosen date range for the first comparison.
for (( index=0; index<${numberofshows}; index++ ))  # loop through the array of shows found.
do
  showdate=${shows[index]%% *}  # removes from the end of the element of the array the longest-matching occurance of a space followed by any number of characters.  this leaves just the "TV year" date range
                                # (2010-2011) or the string "CurrentYear".
  if [[ "${showdate}" == "${olddate}" ]]; then  # if that's the same as the last date range found ...
    showdate="                "  # then it's replaced with a series of spaces for indentation.
  else
    olddate=${showdate}  # otherwise, the old date range is replaced with the new one.
    if [[ "${showdate}" != "CurrentYear" ]]; then showdate=${showdate//-/ - }; fi  # if the new one isn't "CurrentYear", then the '-' in the date range is replaced with ' - ', so it's the same number of
                                                                                   # characters as "CurrentYear".
    showdate="In ${showdate}: "  # in either case, it's then formatted to be "pretty".
  fi
  printf '%s\n' "${showdate}${shows[index]#* }"  # print the formatted date range.  "${shows[index]#* }" removes from the beginning of the element of the array the shortest-matching occurance of any number of
                                                 # characters followed by a space...the date range of the found show, which isn't needed since it's been replaced with a "pretty" version.  the remainder of the
                                                 # element of the array is then printed.
done
