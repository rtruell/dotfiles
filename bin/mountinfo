#!/usr/bin/env bash

# displays mounted drive information in a nicely formatted manner (based on #21
# at http://catonmat.net/blog/another-ten-one-liners-from-commandlingfu-explained)
declare -a usage=(
  " "
  "mountinfo: displays mounted drive information in a nicely formatted manner."
  " "
  "Usage: mountinfo [option]"
  " "
  "Options:"
  "   -h: print this help message."
  "   -m: sort on the MOUNTED ON column."
  "   -t: sort on the TYPE column."
  " "
  "   default is to sort on the FILESYSTEM column"
  " "
)
sortfield="1"  # sort by field 1 - FILESYSTEM.
if [[ -n "${1}" ]]; then
  case "${1}" in
    -h) printf '%s\n' "${usage[@]}"; exit ;;                             # print the usage message.
    -m) sortfield="2" ;;                                                 # sort by field 2 - MOUNTED ON.
    -t) sortfield="3" ;;                                                 # sort by field 3 - TYPE.
     *) printf '%s\n' "Error: Invalid option." "${usage[@]}"; exit 1 ;;  # invalid option given, so print an error message and the usage message.
  esac
fi
printf '\n'
# call the disk usage program, printing only the filesystem (source), mount
# point (target) and filesystem type (fstype) data, routing any error messages
# to /dev/null
df --output=source,target,fstype 2>/dev/null |
# pass on lines that either start with a '/' (devices) or contain the word
# 'type' (the header output from 'df')
grep -Ei "^/|type" |
# read the first line (the header), print it out in upper-case, and pass the
# rest of the output to 'sort'.  'sort' ignores any leading blanks (-b) and
# does a dictionary-order sort ('d', considering only blanks and alphanumeric
# characters) on the specified field (k "${sortfield}")
(read -r; printf "%s\n" "${REPLY^^}"; sort -bdk "${sortfield}")
printf '\n'
