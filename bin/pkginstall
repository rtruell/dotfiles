#!/usr/bin/env bash

#
# Author:   Timothy J. Luoma
# Email:    luomat at gmail dot com
# Date:     2011-07-20
#
# Purpose:  install a pkg
#
# URL:      https://github.com/tjluoma/pkginstall

# MAKE_PUBLIC:YES

# Changelog
# 2022-03-14  Rick Truell
#
# - fixed up the spacing and indentation
#
# - converted to be used in BASH
#
# - most variable names were in uppercase.  changed the ones that aren't
#   actually environment variables to lowercase
#
# - corrected various and sundry typo's
#
# - since I had to change one 'echo' statement to a 'printf' statement to get
#   the output formatted the way I wanted it, decided to change them all

# get the filename of the script
name=`basename "$0"`

# we're going to make a temp file, so we'll make sure no one else can read it
umask 077

reboot=no
auto_reboot=no
error=0

if [[ "$1" == "-r" ]]; then
  # if you call `pkginstall.sh -r` it will automatically reboot after completion
  # BUT only if one of the installation pkgs requested a reboot
  auto_reboot=yes
  shift
elif [[ "$1" == "-R" ]]; then
  # if you call `pkginstall.sh -R` it will automatically reboot 2 minutes after
  # completion REGARDLESS of whether any packages requested a reboot
  auto_reboot=yes
  reboot=yes
  shift
fi

for file in $@; do
  if [[ -r "${file}" ]]; then
    # $file exists and is readable

    # get extension
    ext=`printf '%s' ${file##*.}`

    if [[ "${ext}" == "pkg" || "${ext}" == "mpkg" ]]; then
      # get filename without `dirname` or extension.
      #     i.e. /path/to/foo.bat becomes "foo"
      short=`basename "${file%%.*}"`

      # create a log for each package
      # LOGNAME is username
      # name:r is the name of this script without path
      # $short is package name without path or extension
      log="/tmp/${LOGNAME}.`printf '%s' "${name%.*}"`.${short}.log"

      # tell the user what we are doing and that they might be asked for their
      # password
      printf '%s\n' "${name}: Installing ${file}" "${name}: Logging to ${log}" "${name}: (Note: sudo may ask for your administrator password)"

      # here's where the actual installation happens.  the 'tee' line saves the
      # output to the logfile
      sudo installer -allowUntrusted -verboseR -pkg "${file}" -target CurrentUserHomeDirectory -lang en 2>&1 | tee -a "${log}"

      # see how 'installer' exits
      exit="$?"

      if [[ "${exit}" == "0" ]]; then
        # the installation succeeded
        printf '%s\n' "${name}: ${file} was installed successfully."

        # check the log to see if it said anything about rebooting and if it
        # did, toggle reboot variable which we'll test later
        fgrep -q 'installer: The install recommends restarting now.' "${log}" && reboot=should
        fgrep -q 'installer: The install requires restarting now.'   "${log}" && reboot=must
      else
        # if installation did not succeed, tell the user where to find the log
        # and stop, even if we have other things to try to install
        printf '%s\n' "${name}: failed (\$exit = ${exit}). See ${log} for details"
        exit 1
      fi
    else
      # if the file extension isn't pkg or mpkg then this isn't a package.
      # don't try to install it
      printf '%s\n' "${file} is not a package, \$ext is ${ext}."

      # we don't exit immediately because we might be able to install other
      # packages
      error=1
    fi # file extension check
  else
    printf '%s\n' "${name}: ${file} does not exist or isn't readable"

    # we don't exit immediately because we might be able to install other
    # packages
    error=1
  fi
done

if [[ "${reboot}" == "no" ]]; then
  printf '%s\n' "${name}: rebooting is not necessary after this install"
elif [[ "${reboot}" == "should" ]]; then
  if [[ "${auto_reboot}" == "yes" ]]; then
    # reboot in two minutes.  this should (hopefully!) give the user a chance to
    # save anything they are working on
    sudo shutdown -r +2
    if [[ `type -P growlnotify` ]]; then
      growlnotify --appIcon "Terminal" --identifier "${name}" --sticky --message "The system is rebooting in two minutes from `date`" "${name}"
    fi
  else
    printf "\n\n\n\t\t${name}: Rebooting is RECOMMENDED.\n\n"
  fi
elif [[ "${reboot}" == "must" ]]; then
  if [[ "${auto_reboot}" == "yes" ]]; then
    # reboot in two minutes.  this should (hopefully!) give the user a chance to
    # save anything they are working on
    sudo shutdown -r +2
    if [[ `type -P growlnotify` ]]; then
      growlnotify --appIcon "Terminal" --identifier "${name}" --sticky --message "The system is rebooting in two minutes from `date`" "${name}"
    fi
  else
    printf "\n\n\n\t\t${name}: Rebooting is REQUIRED.\n\n"
  fi
fi
# if we were asked to install any non-packages or packages that don't exist,
# we'll exit with code = 1
exit ${error}
