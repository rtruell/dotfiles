# Capitalise words
# This is a bash-portable way to do this.
# To achieve with awk, use awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
# Known problem: leading whitespace is chomped.
function capitalise {
  # Ignore any instances of '*' that may be in a file
  local GLOBIGNORE="*"
  # Check that stdin or $1 isn't empty
  if [[ -t 0 ]] && [[ -z "${1}" ]]; then
    printf -- '%s\n' "Usage:  capitalise string"
    printf -- '\t%s\n' "Capitalises the first character of STRING and/or its elements."
    return 0
  # Disallow both piping in strings and declaring strings
  elif [[ ! -t 0 ]] && [[ ! -z "${1}" ]]; then
    printf -- '%s\n' "[ERROR] capitalise: Please select either piping in or declaring a string to capitalise, not both."
    return 1
  fi
  # If parameter is a file, or stdin is used, action that first
  # shellcheck disable=SC2119
  if [[ -r "${1}" ]] || [[ ! -t 0 ]]; then
    # We require an exit condition for 'read', this covers the edge case where a line is read that does not have a newline
    eof=
    while [[ -z "${eof}" ]]; do
      # Read each line of input
      read -r || eof=true
      # If the line is blank, then print a blank line and continue
      if [[ -z "${REPLY}" ]]; then
        printf -- '%s\n' ""
        continue
      fi
      # Split each line element for processing
      for inString in ${REPLY}; do
        # If inString is an integer, skip to the next element
        isinteger "${inString}" && continue
        capitalisestring "${inString}"
      # We use to trim to remove any trailing whitespace
      done | paste -sd ' ' -
    done < "${1:-/dev/stdin}"
  # Otherwise, if a parameter exists, then capitalise all given elements.  Processing follows the same path as before.
  elif [[ -n "$*" ]]; then
    for inString in "$@"; do
      capitalisestring "${inString}"
    done | paste -sd ' ' -
  fi
  # Unset GLOBIGNORE, even though we've tried to limit it to this function
  local GLOBIGNORE=
}
